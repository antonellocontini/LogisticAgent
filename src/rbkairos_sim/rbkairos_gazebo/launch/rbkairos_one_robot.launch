<?xml version="1.0"?>
<launch>
	
	<arg name="id_robot" default="rbkairos"/>
	
	<arg name="x_init_pose" default="0"/>
	<arg name="y_init_pose" default="0"/>
	<arg name="z_init_pose" default="0"/>
	<arg name="yaw_init_pose" default="0"/>
	
	<arg name="xacro_robot" default="rbkairos.urdf.xacro"/>
	<arg name="launch_robot_localization" default="false"/>
	<arg name="launch_amcl_and_mapserver" default="true"/>
	<arg name="launch_gmapping" default="false"/>
	<arg name="launch_move_base" default="false"/>
	<arg name="map_file" default="empty/empty.yaml"/>
	<arg name="robot_localization_mode" default="odom"/><!-- odom, complete (including gps)-->
	<arg name="ros_planar_move_plugin" default="true"/><!-- plugin to simulate omni drive -->
	
	<arg name="launch_arm" default="true"/>	<!-- moveit -->	
	<arg name="launch_move_group" default="false"/>	<!-- moveit -->	
	<arg name="has_safety_module" default="false"/>
	<arg name="odom_model_type" default="omni"/>

	<!-- BEGIN ROBOT -->
	<group ns="$(arg id_robot)">
	  
		<arg name="prefix" value="$(arg id_robot)_"/>		
		  
		<!-- Load the URDF into the ROS Parameter Server -->
		<param name="robot_description" 
		command="$(find xacro)/xacro '$(find rbkairos_description)/robots/$(arg xacro_robot)' prefix:=$(arg prefix) ros_planar_move_plugin:=$(arg ros_planar_move_plugin) --inorder"/>

		<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
			<remap from="/joint_states" to="joint_states" />
		</node>

		<!-- Spawner model into gazebo -->
		<!-- nota: i nomi dei giunti sembrano sbagliati, ho cambiato quello della spalla -->
		<node name="urdf_spawner_rbkairos_model" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
		 args="-x $(arg x_init_pose)
				-y $(arg y_init_pose)
				-z $(arg z_init_pose)
				-Y $(arg yaw_init_pose)
				-J $(arg id_robot)_ur10_elbow_joint -2
				-J $(arg id_robot)_ur10_shoulder_lift_joint -1.5705
				-J $(arg id_robot)_ur10_shoulder_pan_joint -0.785
				-urdf
				-param robot_description
				 -model $(arg id_robot)
				 -unpause
				 " />
		 
		 

		<!-- Load joint controller configurations from YAcd .ML file to parameter server -->
		<rosparam file="$(find rbkairos_gazebo)/config/$(arg prefix)control.yaml" command="load"/>  
		<param if="$(arg launch_robot_localization)" name="summit_xl_control/enable_odom_tf" value="false"/>

		<!-- load the controllers -->
		<node unless="$(arg ros_planar_move_plugin)" name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
		   output="screen" args="
                      robotnik_base_control
                      joint_read_state_controller"/>
		<node if="$(arg ros_planar_move_plugin)" name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
		   output="screen" args="
                      joint_read_state_controller"/>
		      
		<node if="$(arg launch_arm)" name="controller_spawner_" pkg="controller_manager" type="spawner" respawn="false"
		   output="screen" args="
                      arm_controller"/>
					  
		<node pkg="twist_mux" type="twist_mux" name="twist_mux">
			<rosparam command="load" file="$(find summit_xl_control)/config/twist_mux.yaml" />
			<remap from="cmd_vel_out" to="robotnik_base_control/cmd_vel" />
		</node>
		 

		<!-- pad -->
		<include file="$(find summit_xl_pad)/launch/summit_xl_pad.launch"/>

		<!-- robot_localization nodes, publishes transformation world->odom->base_footprint -->
		<include if="$(arg launch_robot_localization)" file="$(find summit_xl_localization)/launch/robot_localization_$(arg robot_localization_mode).launch">
			<arg name="prefix" value="$(arg prefix)"/>
		</include>

		<!-- use static_transform_publisher to define map->odom transform    -->
		<!-- only use if you arenÂ´t using a localization algorithm like amcl -->
		<!--node if="$(arg fake_map_transform)" pkg="tf" type="static_transform_publisher" name="static_map_broadcaster" args="0 0 0 0 0 0 map $(arg namespace)odom 100" /-->
		
		<!-- amcl and map server base-->
		<include if="$(arg launch_amcl_and_mapserver)" file="$(find summit_xl_localization)/launch/map_server.launch">
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="map_file" value="$(arg map_file)"/>
		</include>
		<include if="$(arg launch_amcl_and_mapserver)" file="$(find summit_xl_localization)/launch/amcl.launch">
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="x_init_pose" value="$(arg x_init_pose)"/>
			<arg name="y_init_pose" value="$(arg y_init_pose)"/>
			<arg name="z_init_pose" value="$(arg z_init_pose)"/>
			<arg name="odom_model_type" value="$(arg odom_model_type)"/>
		</include>

				<!-- move base -->
		<include if="$(arg launch_move_base)" file="$(find summit_xl_navigation)/launch/move_base.launch">
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="omni" value="$(arg ros_planar_move_plugin)"/>
		</include>


		
		<!-- gmapping -->
		<include if="$(arg launch_gmapping)" file="$(find summit_xl_localization)/launch/slam_gmapping.launch">
			<arg name="prefix" value="$(arg prefix)"/>
		</include>
		
		<!-- MoveGroup Moveit! -->
		<include if="$(arg launch_move_group)" file="$(find rbkairos_10_moveit_config)/launch/rbkairos_10_moveit_config.launch">
		</include>

	</group>
	


</launch>

